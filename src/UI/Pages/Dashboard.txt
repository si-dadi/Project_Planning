import React, { useState, useEffect } from "react";
import {
  BsFileBarGraphFill,
  BsPlusSquareDotted,
  BsPersonCircle,
} from "react-icons/bs";
import Calendar from "react-calendar";
import "react-calendar/dist/Calendar.css";
import recentActivity from "./recentActivity.json";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
} from "recharts";
import Card from "./Card";
import Project from "./CurrentProject";
import data from "./data.json";
import projectsData from "./Projects.json";
import "./Content2.css";
import admins from "../../loginPage/UserData";

function Dashboard() {
  const genres = [
    { title: "My Project", value: "my project" },
    { title: "K-Pop", value: "k pop" },
    { title: "Country", value: "country" },
    { title: "Dance", value: "dance" },
    { title: "Alternative", value: "alternative" },
    { title: "Electronic", value: "electronic" },
    { title: "Rock", value: "rock" },
    { title: "Pop", value: "pop" },
    { title: "Soul", value: "soul" },
    { title: "Worldwide", value: "worldwide" },
  ];

  const [selected, setSelected] = useState(genres[0].value);

  const [projects, setProjects] = useState([]);
  const [selectedProject, setSelectedProject] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [isAdmin, setIsAdmin] = useState(false);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const url = `http://localhost:5984/${process.env.REACT_APP_COUCHDB_DBNAME}/_all_docs`;
        const headers = new Headers();
        headers.append("Content-Type", "application/json");
        headers.append(
          "Authorization",
          "Basic " + btoa(process.env.REACT_APP_COUCHDB_USERNAME_AND_PASSWORD)
        );

        const response = await fetch(url, {
          method: "GET",
          headers: headers,
        });

        if (response.ok) {
          const data = await response.json();
          const projectDocs = await Promise.all(
            data.rows.map(async (row) => {
              const docUrl = `http://localhost:5984/${process.env.REACT_APP_COUCHDB_DBNAME}/${row.id}`;
              const docResponse = await fetch(docUrl, {
                method: "GET",
                headers: headers,
              });
              if (docResponse.ok) {
                const docData = await docResponse.json();
                return docData;
              } else {
                console.error(
                  `An error occurred while fetching project document: ${docResponse.status} ${docResponse.statusText}`
                );
                return null;
              }
            })
          );
          setProjects(projectDocs.filter((doc) => doc !== null));
        } else {
          const errorText = await response.text();
          console.error(
            `An error occurred while fetching data: ${response.status} ${response.statusText}\n${errorText}`
          );
        }
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };

    fetchData();

    function isAdminUser(e) {
      if (admins[e]) {
        return true;
      } else {
        return false;
      }
    }
    setIsAdmin(isAdminUser(localStorage.getItem("email")));
  }, []);

  const handleProjectClick = (project) => {
    setSelectedProject(project);
    setShowModal(true);
  };

  const closeModal = () => {
    setSelectedProject(null);
    setShowModal(false);
  };

  return (
    <div className="flex flex-col mt-[5%] -z-50">
      <div className="flex-1 w-full h-[1/8] items-center top-20 text-left p-6 left-20 flex flex-row">
        {/* First Div */}
        <div className="flex flex-1 flex-col">
          <h1 className="font-extrabold text-lg">Dashboard</h1>
          <h1 className="text-black/95 text-base">
            Hi, {localStorage.getItem("displayName")}
          </h1>
          <h1 className="text-black/60 text-sm">
            Welcome to Project Management Dashboard
          </h1>
        </div>
        <div className="right-[5%] flex flex-row items-center align-middle">
          <select
            defaultValue={genres[0]}
            value={selected}
            onChange={(e) => {
              setSelected(e.target.value);
            }}
            className="bg-[#F2F2F2] text-black font-semibold p-3 mr-1 text-sm rounded-lg outline-none sm:mt-0 mt-5"
          >
            {genres.map((genre) => (
              <option key={genre.value} value={genre.value}>
                {genre.title}
              </option>
            ))}
          </select>
          <div className="bg-[#F2F2F2] mx-6 w-10 h-10 rounded-xl flex">
            <button>
              <BsFileBarGraphFill className="w-10 h-7 my-auto" />
            </button>
          </div>
        </div>
      </div>

      <div className="flex-1 flex flex-col bg-[#F2F2F2] my-4">
        <div className="flex flex-row h-1/2 my-4">
          <div className="w-2/3">
            {/* First Div */}
            <div className="h-full flex flex-col">
              <h1 className="font-semibold">Project Statistics</h1>
              <div className="flex flex-col overflow-y-scroll ">
                {projectsData.map((project) => (
                  <button>
                    <Project key={project.id} project={project} />
                  </button>
                ))}
              </div>
            </div>
          </div>
          <div className="w-1/3">
            {/* Second Div */}
            <div className="h-full flex flex-col items-center justify-center custom-calendar-container">
              <h1 className="font-bold">Calendar</h1>
              <Calendar className="bg-[#CCC1BE]" />
            </div>
          </div>
        </div>
        <div className="flex flex-row h-1/2 my-4">
          <div className="w-full flex flex-row">
            {/* Third Div */}
            <div className="h-full w-2/3 flex flex-col items-center justify-center">
              <h1 className="font-semibold">Project Deliveries</h1>
              <LineChart width={500} height={200} data={data.dataPoints}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="x" />
                <YAxis />
                <Tooltip />
                <Legend align="right" verticalAlign="top" />
                <Line
                  type="monotone"
                  dataKey="Target"
                  stroke="#8884d8"
                  name="Target"
                  strokeWidth={4}
                />
                <Line
                  type="monotone"
                  dataKey="Achieved"
                  stroke="#82ca9d"
                  name="Achieved"
                  strokeWidth={4}
                />
              </LineChart>
            </div>
            <div className="h-full flex flex-col items-center justify-center w-1/3">
              <h1 className="font-bold">Events</h1>
              <div className="flex flex-row px-2 my-auto items-center">
                <div className="w-3/5">
                  <button>
                    <Card title="Monthly Report" subtitle="30th June" />
                  </button>
                </div>
                <div className="w-2/5">
                  <button>
                    <div className="bg-white flex-1 flex w-full h-full p-4 shadow-md rounded-lg">
                      <BsPlusSquareDotted className="w-8 h-8 flex flex-1 mx-auto my-auto" />
                    </div>
                  </button>
                </div>
              </div>
            </div>
          </div>
          <div className="flex flex-col gap-4 w-1/3 mr-[5%]">
            <h1 className="font-bold">Activities</h1>
            {recentActivity.map((activity, index) => (
              <div
                key={index}
                className="bg-white p-4 shadow-md rounded-lg flex items-center"
              >
                <div className="mr-4">
                  <BsPersonCircle size={24} />
                </div>
                <div className="text-left">
                  <h2 className="font-semibold text-sm">{activity.title}</h2>
                  <p className="text-xs text-slate-500">{`${activity.subtitle.date} | ${activity.subtitle.time}`}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}

export default Dashboard;
